var express = require('express');var app = express();var bodyParser = require('body-parser');var cookieParser = require('cookie-parser');var session = require('express-session');var csrf = require('csurf');var user = require('./models/user.js');var messages = require('./models/messages.js');var csrfWhiteList = /\/newreplies\/topic\/[0-9]+\/reply\/[0-9]+/g;var csrfException = function(url) {    if (url.match(csrfWhiteList)) {        return true;    } else {        return false;    }}var conditionalCSRF = function(req, res, next) {    if (csrfException(req.url)) {        next();    } else {        csrf()(req, res, next);    }}app.use(bodyParser());app.use(cookieParser());app.use(session({secret: 'fakesecret'}));app.use(express.query());app.use(conditionalCSRF);app.use(express.static(__dirname + '/public'));app.use(function(req, res, next) {        if (!csrfException(req.url)) {            res.locals.token = req.csrfToken();        }        next();    });app.set('view engine', 'jade');app.get('/register', function(req, res) {    res.render('register');});app.post('/register', function(req, res) {    var username = req.body.username;    var password = req.body.password;    user.newUser(username, password, false)    .then(function() {        res.redirect('/register');    });});app.get('/login', function(req, res) {    res.render('login');})app.post('/login', function(req, res) {    var username = req.body.username;    var password = req.body.password;    user.authenticateUser(username, password)    .then(function(id) {        if(id) {            req.session.userID = id;            res.redirect('/page/1');        } else {            res.redirect('/login');        }    })    .fail(function(err) {        console.log(err);        res.redirect('/register');    })});app.get('/logout', function(req, res) {    req.session.destroy();    res.redirect('/login');})app.get('/newtopic', function(req, res) {    if (typeof req.session.userID === 'undefined') {        res.redirect('/login');    } else {        res.render('newTopic');    }});app.post('/newtopic', function(req, res) {    if (typeof req.session.userID === 'undefined') {        res.redirect('/login');    } else {        var userID = req.session.userID;        var title = req.body.title;        var message = req.body.message;        messages.newTopic(userID, title, message)        .then(function(topicID) {            res.redirect('/topic/' + topicID);        })        .fail(function(err) {            console.log(err);            res.redirect('/register');        });    }});app.get('/page/:page', function(req, res) {    if (typeof req.session.userID === 'undefined') {        res.redirect('/login');    } else {        messages.getPage(req.params.page)        .then(function(topics) {            res.render('topic_list', { topics: topics });        })        .fail(function(err) {            console.log(err);        });    }});app.get('/topic/:id', function(req, res) {    if (typeof req.session.userID === 'undefined') {        res.redirect('/login');    } else {        messages.getTopic(req.params.id)        .then(function(topicContents) {            var maxReply = 0;            for (var i = 0; i < topicContents.messages.length; i++) {                if (topicContents.messages[i].id > maxReply) {                    maxReply = topicContents.messages[i].id;                }            }            res.render('topic', { topicContents: topicContents, maxReply: maxReply });        })        .fail(function(err) {            console.log(err);        });    }});app.get('/reply/:id', function(req, res) {    if (typeof req.session.userID === 'undefined') {        res.redirect('/login');    } else {        res.render('reply');    }});app.post('/reply/:id', function(req, res) {    if (typeof req.session.userID === 'undefined') {        res.redirect('/login');    } else {        var userID = req.session.userID;        var topicID = req.params.id;        var message = req.body.message;        messages.newReply(userID, message, topicID)        .then(function(reply) {            newReply(reply);            res.redirect('/topic/' + topicID);        })        .fail(function(err) {            console.log(err);        });    }});var newReply = function(reply) {    while (typeof heldResponses[reply.topic] !== "undefined" && heldResponses[reply.topic].length > 0) {        console.log('sending');        resDetails = heldResponses[reply.topic].shift();        messages.getNewReplies(resDetails.topicID, resDetails.replyID)        .then(function(replies) {            resDetails.res.send(replies);        })        .fail(function(err) {            console.log(err);        });    }};var heldResponses = {};app.post('/newreplies/topic/:topic/reply/:reply', function(req, res) {    var topicID = req.params.topic;    var replyID = req.params.reply;    var resDetails = { topicID: topicID, replyID: replyID, res: res };    if(topicID in heldResponses) {        heldResponses[topicID].push(resDetails);    } else {        heldResponses[topicID] = [resDetails];    }    // Time out after 60 seconds.    setTimeout(function() {        res.send(408);    }, 60000);});app.listen(8000);